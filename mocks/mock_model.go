// Code generated by MockGen. DO NOT EDIT.
// Source: rest/model (interfaces: Datastore)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	model "rest/model"

	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
)

// MockDatastore is a mock of Datastore interface.
type MockDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockDatastoreMockRecorder
}

// MockDatastoreMockRecorder is the mock recorder for MockDatastore.
type MockDatastoreMockRecorder struct {
	mock *MockDatastore
}

// NewMockDatastore creates a new mock instance.
func NewMockDatastore(ctrl *gomock.Controller) *MockDatastore {
	mock := &MockDatastore{ctrl: ctrl}
	mock.recorder = &MockDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatastore) EXPECT() *MockDatastoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDatastore) Create(arg0 *model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDatastoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDatastore)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockDatastore) Delete(arg0 *model.Product, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0, arg1)
}

// Delete indicates an expected call of Delete.
func (mr *MockDatastoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDatastore)(nil).Delete), arg0, arg1)
}

// Find mocks base method.
func (m *MockDatastore) Find(arg0 *[]model.Product) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockDatastoreMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDatastore)(nil).Find), arg0)
}

// GetCategorisedProducts mocks base method.
func (m *MockDatastore) GetCategorisedProducts(arg0 map[string][]string) []model.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategorisedProducts", arg0)
	ret0, _ := ret[0].([]model.Product)
	return ret0
}

// GetCategorisedProducts indicates an expected call of GetCategorisedProducts.
func (mr *MockDatastoreMockRecorder) GetCategorisedProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategorisedProducts", reflect.TypeOf((*MockDatastore)(nil).GetCategorisedProducts), arg0)
}

// GetProductForUpdate mocks base method.
func (m *MockDatastore) GetProductForUpdate(arg0, arg1 string, arg2 *model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductForUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetProductForUpdate indicates an expected call of GetProductForUpdate.
func (mr *MockDatastoreMockRecorder) GetProductForUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductForUpdate", reflect.TypeOf((*MockDatastore)(nil).GetProductForUpdate), arg0, arg1, arg2)
}

// Order mocks base method.
func (m *MockDatastore) Order(arg0 string) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Order indicates an expected call of Order.
func (mr *MockDatastoreMockRecorder) Order(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockDatastore)(nil).Order), arg0)
}

// Save mocks base method.
func (m *MockDatastore) Save(arg0 *model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockDatastoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDatastore)(nil).Save), arg0)
}

// Where mocks base method.
func (m *MockDatastore) Where(arg0, arg1 string) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Where", arg0, arg1)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockDatastoreMockRecorder) Where(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockDatastore)(nil).Where), arg0, arg1)
}
